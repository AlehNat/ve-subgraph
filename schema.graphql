# noinspection GraphQLMissingType

# derivedFrom doc https://thegraph.com/docs/en/developer/create-subgraph-hosted/#reverse-lookups
# Need to use for all one-to-many relationships for performance reason.

type ControllerEntity @entity {
    "Central contract for storing all dependency addresses"
    id: ID!

    # dependencies
    tetuVoter: TetuVoterEntity!
    vaultController: VaultControllerEntity!
    liquidator: LiquidatorEntity!
    forwarder: ForwarderEntity!
    investFund: InvestFundEntity!
    veDistributor: VeDistEntity!
    platformVoter: PlatformVoterEntity!


    # attributes
    version: String!
    vaultsCount: Int!
    vaults: [VaultEntity!]! @derivedFrom(field: "controller")
    operators: [String!]!
    addressChangeAnnounces: [AddressChangeAnnounceEntity!]!  @derivedFrom(field: "controller")
    proxyUpgradeAnnounces: [ProxyUpgradeAnnounceEntity!]!  @derivedFrom(field: "controller")
}

type AddressChangeAnnounceEntity @entity {
    id: ID!
    controller: ControllerEntity!
    aType: String!
    newAddress: String!
    timeLockAt: Int!
}

type ProxyUpgradeAnnounceEntity @entity {
    id: ID!
    controller: ControllerEntity!
    proxy: String!
    implementation: String!
    timeLockAt: Int!
}

type VaultEntity @entity {
    id: ID!
    controller: ControllerEntity!

    # dependencies
    gauge: GaugeEntity!
    splitter: SplitterEntity!
    insurance: InsuranceEntity!

    # attributes
    version: String!
    asset: String!
    decimals: Int!
    name: String!
    symbol: String!
    buffer: BigDecimal!
    maxWithdrawAssets: BigDecimal!
    maxRedeemShares: BigDecimal!
    maxDepositAssets: BigDecimal!
    maxMintShares: BigDecimal!
    depositFee: BigDecimal!
    withdrawFee: BigDecimal!
    doHardWorkOnInvest: Boolean!

    # stats
    totalAssets: BigDecimal!
    totalAssetsUSD: BigDecimal!
    splitterAssets: BigDecimal!
    sharePrice: BigDecimal!
    totalSupply: BigDecimal!
    assetPrice: BigDecimal!

    users: [UserVault!]! @derivedFrom(field: "vault")
    usersCount: Int!
}

type UserVault @entity {
    "Mapping entity for connection vault and user entities"
    id: ID!
    vault: VaultEntity!
    user: UserEntity!
}

type UserEntity @entity {
    id: ID!
    vaults: [UserVault!]! @derivedFrom(field: "user")
}

type InsuranceEntity @entity {
    id: ID!

    # dependencies
    vault: VaultEntity!

    # attributes
    asset: String!

    # stats
    balance: BigDecimal!
    balanceHistory: BigDecimal!
    covered: BigDecimal!
}

type SplitterEntity @entity {
    id: ID!

    # dependencies
    vault: VaultEntity!

    #attributes
    version: String!
    asset: String!
    strategies: [StrategyEntity!]! @derivedFrom(field: "splitter")
    totalApr: BigDecimal!
    scheduledStrategies: [String!]!

}

type StrategyEntity @entity {
    id: ID!

    # dependencies
    splitter: SplitterEntity!

    #attributes
    version: String!
    asset: String!
    compoundRatio: BigDecimal!
    paused: Boolean!
    apr: BigDecimal!
    aprHistory: [BigDecimal!]!
    lastHardWork: Int!
}

type GaugeEntity @entity {
    id: ID!
}

type BribeEntity @entity {
    id: ID!
}


type TetuVoterEntity @entity {
    id: ID!
}

type VaultControllerEntity @entity {
    id: ID!
}

type LiquidatorEntity @entity {
    id: ID!
}

type ForwarderEntity @entity {
    id: ID!
}

type InvestFundEntity @entity {
    id: ID!
}

type VeDistEntity @entity {
    id: ID!
}

type PlatformVoterEntity @entity {
    id: ID!
}

type VeTetuEntity @entity {
    id: ID!
}


