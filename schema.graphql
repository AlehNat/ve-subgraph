# noinspection GraphQLMissingType

# derivedFrom doc https://thegraph.com/docs/en/developer/create-subgraph-hosted/#reverse-lookups
# Need to use for all one-to-many relationships for performance reason.

type ControllerEntity @entity {
    "Central contract for storing all dependency addresses"
    id: ID!
    version: String!
    revision: Int!
    createdTs: Int!
    createdBlock: Int!
    implementations: [String!]!

    # dependencies
    tetuVoter: TetuVoterEntity!
    vaultController: VaultControllerEntity!
    liquidator: LiquidatorEntity!
    forwarder: ForwarderEntity!
    investFund: InvestFundEntity!
    veDistributor: VeDistEntity!
    platformVoter: PlatformVoterEntity!


    # attributes
    governance: String!
    whitelistedVaults: Int!
    vaults: [VaultEntity!]! @derivedFrom(field: "controller")
    operators: [String!]!
    addressChangeAnnounces: [AddressChangeAnnounceEntity!]!  @derivedFrom(field: "controller")
    proxyUpgradeAnnounces: [ProxyUpgradeAnnounceEntity!]!  @derivedFrom(field: "controller")
}

type AddressChangeAnnounceEntity @entity {
    "Important address change announce info"
    id: ID!
    controller: ControllerEntity!
    aType: String!
    idType: Int!
    newAddress: String!
    timeLockAt: Int!
}

type ProxyUpgradeAnnounceEntity @entity {
    "Proxy upgrade announce info"
    id: ID!
    controller: ControllerEntity!
    proxy: String!
    implementation: String!
    timeLockAt: Int!
}

type VaultFactoryEntity @entity {
    "Factory for create vaults with all dependencies"
    id: ID!

    #dependencies
    controller: ControllerEntity!

    #attributes
    vaultImpl: String!
    vaultInsuranceImpl: String!
    splitterImpl: String!

    vaultsCount: Int!
    deployedVaults: [VaultEntity!]!  @derivedFrom(field: "factory")
}

type VaultEntity @entity {
    "TetuVaultV2 info"
    id: ID!
    version: String!
    revision: Int!
    createdTs: Int!
    createdBlock: Int!
    implementations: [String!]!

    # dependencies
    controller: ControllerEntity!
    gauge: GaugeEntity!
    splitter: SplitterEntity!
    insurance: InsuranceEntity!
    factory: VaultFactoryEntity!

    # attributes
    asset: String!
    decimals: Int!
    name: String!
    symbol: String!
    buffer: BigDecimal!
    maxWithdrawAssets: BigDecimal!
    maxRedeemShares: BigDecimal!
    maxDepositAssets: BigDecimal!
    maxMintShares: BigDecimal!
    depositFee: BigDecimal!
    withdrawFee: BigDecimal!
    doHardWorkOnInvest: Boolean!

    # stats
    totalAssets: BigDecimal!
    totalAssetsUSD: BigDecimal!
    vaultAssets: BigDecimal!
    splitterAssets: BigDecimal!
    sharePrice: BigDecimal!
    totalSupply: BigDecimal!
    assetPrice: BigDecimal!
    # todo history

    users: [UserVault!]! @derivedFrom(field: "vault")
    usersCount: Int!

    vote: VaultVoteEntity!

    isControllerWhitelisted: Boolean!
    isGaugeWhitelisted: Boolean!
}

type UserVault @entity {
    "Mapping entity for connection vault and user entities"
    id: ID!

    # dependencies
    vault: VaultEntity!
    user: UserEntity!

    #attributes
    approves: [VaultApproveEntity!]! @derivedFrom(field: "user")
    balanceShares: BigDecimal!
    balanceAssets: BigDecimal!
    balanceAssetsUsd: BigDecimal!
    lastUpdate: Int!

    # profit
    compoundProfitTotal: BigDecimal!
    acProfitCount: Int!
    acAprSum: BigDecimal! # for calculate average apr
    compoundProfits: [UserCompoundProfit!]! @derivedFrom(field: "userVault")
}

type UserCompoundProfit @entity {
    "Auto-compounded profit history for a vault user"
    id: ID!

    userVault: UserVault!

    time: Int!
    balanceShares: BigDecimal!
    balanceAssets: BigDecimal!
    balanceAssetsUsd: BigDecimal!
    profit: BigDecimal!
    apr: BigDecimal!
    averageApr: BigDecimal!
}

type VaultApproveEntity @entity {
    "Vault share token approves"
    id: ID!

    #dependencies
    user: UserVault!

    #attributes
    amount: BigDecimal!
    spender: String!
}

type InsuranceEntity @entity {
    "Insurance contract connected to the SmartVaultV2"
    id: ID!

    # dependencies
    vault: VaultEntity!

    # attributes
    asset: String!

    # stats
    balance: BigDecimal!
    balanceHistory: BigDecimal!
    covered: BigDecimal!
}

type SplitterEntity @entity {
    "Strategy splitter connected to the SmartVaultV2"
    id: ID!
    version: String!
    revision: Int!
    createdTs: Int!
    createdBlock: Int!
    implementations: [String!]!

    # dependencies
    vault: VaultEntity!

    #attributes
    asset: String!
    strategies: [StrategyEntity!]! @derivedFrom(field: "splitter")
    scheduledStrategies: [String!]!

    totalApr: BigDecimal! #todo
    profit: BigDecimal!
    loss: BigDecimal!
}

type StrategyEntity @entity {
    "Strategy under control of the StrategySplitter"
    id: ID!
    version: String!
    revision: Int!
    createdTs: Int!
    createdBlock: Int!
    implementations: [String!]!

    # dependencies
    splitter: SplitterEntity!

    #attributes
    asset: String!
    compoundRatio: BigDecimal!
    paused: Boolean!
    lastHardWork: Int!

    history: [StrategyHistory!]! @derivedFrom(field: "strategy")
    tvl: BigDecimal!
    profit: BigDecimal!
    loss: BigDecimal!
    apr: BigDecimal!
    averageApr: BigDecimal!
}

type StrategyHistory @entity {
    id: ID!

    # dependencies
    strategy: StrategyEntity!

    #attributes
    time: Int!
    tvl: BigDecimal!
    profit: BigDecimal!
    loss: BigDecimal!
    apr: BigDecimal!
    averageApr: BigDecimal!
}

type GaugeEntity @entity {
    "Central Gauge for Tetu vaults"
    id: ID!
    version: String!
    revision: Int!
    createdTs: Int!
    createdBlock: Int!
    implementations: [String!]!

    # dependencies
    ve: VeTetuEntity!

    #attributes
    operator: String!
    defaultRewardToken: String!
    stakingTokens: [String!]!
    userGauges: [UserGauge!]! @derivedFrom(field: "gauge")

}

type UserGauge @entity {
    "Mapping entity for connection gauge and user entities"
    id: ID!
    gauge: GaugeEntity!
    user: UserEntity!
}

type BribeEntity @entity {
    "Central Bribe contract for veTETU"
    id: ID!
    version: String!
    revision: Int!
    createdTs: Int!
    createdBlock: Int!
    implementations: [String!]!

    # dependencies
    ve: VeTetuEntity!

    #attributes
    operator: String!
    defaultRewardToken: String!
    stakingTokens: [String!]!
    userBribes: [UserBribe!]! @derivedFrom(field: "bribe")
}

type UserBribe @entity {
    "Mapping entity for connection bribe and user entities"
    id: ID!
    bribe: BribeEntity!
    user: UserEntity!
}

type TetuVoterEntity @entity {
    "Voter for distribute TETU rewards to gauges"
    id: ID!
    version: String!
    revision: Int!
    createdTs: Int!
    createdBlock: Int!
    implementations: [String!]!

    # dependencies
    controller: ControllerEntity!
    ve: VeTetuEntity!
    gauge: GaugeEntity!
    bribe: BribeEntity!
    token: String!

    #attributes
    vaultVotes: [VaultVoteEntity!]! @derivedFrom(field: "tetuVoter")
    rewardsTotalAmount: BigDecimal!

    users: [UserTetuVote!]! @derivedFrom(field: "tetuVoter")
}

type UserTetuVote @entity {
    "User vote for a vault"
    id: ID!

    tetuVoter: TetuVoterEntity!
    user: UserEntity!

    amount: BigDecimal!
    percent: BigDecimal!
}

type VaultVoteEntity @entity {
    "Vault vote info"
    id: ID!

    # dependencies
    tetuVoter: TetuVoterEntity!
    vault: VaultEntity!

    #attributes
    votePercent: BigDecimal!
    voteAmount: BigDecimal!
    expectReward: BigDecimal!
}

type LiquidatorEntity @entity {
    "A central place for selling tokens"
    id: ID!
    version: String!
    revision: Int!
    createdTs: Int!
    createdBlock: Int!
    implementations: [String!]!

    controller: ControllerEntity!
}

type ForwarderEntity @entity {
    "Accumulate rewards and distribute them to Invest Fund / Tetu Voter / Ve Distributor"
    id: ID!
    version: String!
    revision: Int!
    createdTs: Int!
    createdBlock: Int!
    implementations: [String!]!

    # dependencies
    tetu: String!
    controller: ControllerEntity!

    # attributes
    tetuThreshold: BigDecimal!
    toInvestFundRatio: BigDecimal!
    toGaugesRatio: BigDecimal!
}

type InvestFundEntity @entity {
    "Contract for holding assets for the Second Stage"
    id: ID!
    version: String!
    revision: Int!
    createdTs: Int!
    createdBlock: Int!
    implementations: [String!]!

    controller: ControllerEntity!

    tetuAmount: BigDecimal!
    usdcAmount: BigDecimal!
}

type VeDistEntity @entity {
    "Distributor for veTETU rewards"
    id: ID!
    version: String!
    revision: Int!
    createdTs: Int!
    createdBlock: Int!
    implementations: [String!]!

    #dependencies
    ve: VeTetuEntity!
    rewardToken: String!
    controller: ControllerEntity!

    #attributes
    activePeriod: Int!
    timeCursor: Int!
    tokenLastBalance: BigDecimal!
    lastTokenTime: BigDecimal!
}

type PlatformVoterEntity @entity {
    "Voter for different platform attributes"
    id: ID!
    version: String!
    revision: Int!
    createdTs: Int!
    createdBlock: Int!
    implementations: [String!]!

    #dependencies
    ve: VeTetuEntity!
    controller: ControllerEntity!

    #attributes
    votes: [PlatformVoteEntity!]! @derivedFrom(field: "platformVoter")

}

type PlatformVoteEntity @entity {
    id: ID!

    #dependencies
    platformVoter: PlatformVoterEntity!
    user: UserEntity!

    #attributes
    amount: BigDecimal!
    percent: BigDecimal!
}

type VeTetuEntity @entity {
    id: ID!
    version: String!
    revision: Int!
    createdTs: Int!
    createdBlock: Int!
    implementations: [String!]!

    tokens: [VeTetuTokenEntity!]! @derivedFrom(field: "ve")
    count: Int!
    users: [VeUserEntity!]! @derivedFrom(field: "ve")
    epoch: Int!
    allowedPawnshops: [String!]!
}

type VeUserEntity @entity {
    id: ID!

    ve: VeTetuEntity!
    user: UserEntity!

    locked: [VeUserTokenEntity!]! @derivedFrom(field: "veUser")
    derivedAmount: BigDecimal!
    lockedEnd: Int!
    attachments: Int!
    voted: Int!
}

type VeUserTokenEntity @entity {
    id: ID!

    veUser: VeUserEntity!
    token: String!
    amount: BigDecimal!
}

type VeTetuTokenEntity @entity {
    id: ID!

    ve: VeTetuEntity!

    address: String!
    weight: BigDecimal!
    supply: BigDecimal!
}

type UserEntity @entity {
    "Tetu user accumulated info"
    id: ID!

    vaults: [UserVault!]! @derivedFrom(field: "user")
    gauges: [UserGauge!]! @derivedFrom(field: "user")
    bribes: [UserBribe!]! @derivedFrom(field: "user")
    tetuVotes: [UserTetuVote!]! @derivedFrom(field: "user")
    platformVotes: [PlatformVoteEntity!]! @derivedFrom(field: "user")
    ve: [VeUserEntity!]! @derivedFrom(field: "user")
}

type VaultControllerEntity @entity {
    "TBD"
    id: ID!
    version: String!
    revision: Int!
    createdTs: Int!
    createdBlock: Int!
    implementations: [String!]!

    controller: ControllerEntity!
}


